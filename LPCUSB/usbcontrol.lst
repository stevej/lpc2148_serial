   1              		.cpu arm7tdmi-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 18, 4
  11              		.file	"usbcontrol.c"
  19              	.Ltext0:
  20              		.align	2
  21              		.global	USBRegisterRequestHandler
  23              	USBRegisterRequestHandler:
  24              	.LFB4:
  25              		.file 1 "LPCUSB/usbcontrol.c"
   1:LPCUSB/usbcontrol.c **** /*
   2:LPCUSB/usbcontrol.c **** 	LPCUSB, an USB device driver for LPC microcontrollers	
   3:LPCUSB/usbcontrol.c **** 	Copyright (C) 2006 Bertrik Sikken (bertrik@sikken.nl)
   4:LPCUSB/usbcontrol.c **** 
   5:LPCUSB/usbcontrol.c **** 	Redistribution and use in source and binary forms, with or without
   6:LPCUSB/usbcontrol.c **** 	modification, are permitted provided that the following conditions are met:
   7:LPCUSB/usbcontrol.c **** 
   8:LPCUSB/usbcontrol.c **** 	1. Redistributions of source code must retain the above copyright
   9:LPCUSB/usbcontrol.c **** 	   notice, this list of conditions and the following disclaimer.
  10:LPCUSB/usbcontrol.c **** 	2. Redistributions in binary form must reproduce the above copyright
  11:LPCUSB/usbcontrol.c **** 	   notice, this list of conditions and the following disclaimer in the
  12:LPCUSB/usbcontrol.c **** 	   documentation and/or other materials provided with the distribution.
  13:LPCUSB/usbcontrol.c **** 	3. The name of the author may not be used to endorse or promote products
  14:LPCUSB/usbcontrol.c **** 	   derived from this software without specific prior written permission.
  15:LPCUSB/usbcontrol.c **** 
  16:LPCUSB/usbcontrol.c **** 	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  17:LPCUSB/usbcontrol.c **** 	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  18:LPCUSB/usbcontrol.c **** 	OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  19:LPCUSB/usbcontrol.c **** 	IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, 
  20:LPCUSB/usbcontrol.c **** 	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  21:LPCUSB/usbcontrol.c **** 	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  22:LPCUSB/usbcontrol.c **** 	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  23:LPCUSB/usbcontrol.c **** 	THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  24:LPCUSB/usbcontrol.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  25:LPCUSB/usbcontrol.c **** 	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  26:LPCUSB/usbcontrol.c **** */
  27:LPCUSB/usbcontrol.c **** 
  28:LPCUSB/usbcontrol.c **** 
  29:LPCUSB/usbcontrol.c **** /** @file
  30:LPCUSB/usbcontrol.c **** 	Control transfer handler.
  31:LPCUSB/usbcontrol.c **** 	
  32:LPCUSB/usbcontrol.c **** 	This module handles control transfers and is normally installed on the
  33:LPCUSB/usbcontrol.c **** 	endpoint 0 callback.
  34:LPCUSB/usbcontrol.c **** 	
  35:LPCUSB/usbcontrol.c **** 	Control transfers can be of the following type:
  36:LPCUSB/usbcontrol.c **** 	0 Standard;
  37:LPCUSB/usbcontrol.c **** 	1 Class;
  38:LPCUSB/usbcontrol.c **** 	2 Vendor;
  39:LPCUSB/usbcontrol.c **** 	3 Reserved.
  40:LPCUSB/usbcontrol.c **** 
  41:LPCUSB/usbcontrol.c **** 	A callback can be installed for each of these control transfers using
  42:LPCUSB/usbcontrol.c **** 	USBRegisterRequestHandler.
  43:LPCUSB/usbcontrol.c **** 	When an OUT request arrives, data is collected in the data store provided
  44:LPCUSB/usbcontrol.c **** 	with the USBRegisterRequestHandler call. When the transfer is done, the
  45:LPCUSB/usbcontrol.c **** 	callback is called.
  46:LPCUSB/usbcontrol.c **** 	When an IN request arrives, the callback is called immediately to either
  47:LPCUSB/usbcontrol.c **** 	put the control transfer data in the data store, or to get a pointer to
  48:LPCUSB/usbcontrol.c **** 	control transfer data. The data is then packetised and sent to the host.
  49:LPCUSB/usbcontrol.c **** */
  50:LPCUSB/usbcontrol.c **** 
  51:LPCUSB/usbcontrol.c **** #include "type.h"
  52:LPCUSB/usbcontrol.c **** #include "usbdebug.h"
  53:LPCUSB/usbcontrol.c **** 
  54:LPCUSB/usbcontrol.c **** #include "usbstruct.h"
  55:LPCUSB/usbcontrol.c **** #include "usbapi.h"
  56:LPCUSB/usbcontrol.c **** 
  57:LPCUSB/usbcontrol.c **** #undef MIN
  58:LPCUSB/usbcontrol.c **** #define MIN(x,y)	((x)<(y)?(x):(y))	/**< MIN */
  59:LPCUSB/usbcontrol.c **** 
  60:LPCUSB/usbcontrol.c **** #define	MAX_CONTROL_SIZE	128	/**< maximum total size of control transfer data */
  61:LPCUSB/usbcontrol.c **** #define	MAX_REQ_HANDLERS	4	/**< standard, class, vendor, reserved */
  62:LPCUSB/usbcontrol.c **** 
  63:LPCUSB/usbcontrol.c **** static TSetupPacket		Setup;	/**< setup packet */
  64:LPCUSB/usbcontrol.c **** 
  65:LPCUSB/usbcontrol.c **** static U8				*pbData;	/**< pointer to data buffer */
  66:LPCUSB/usbcontrol.c **** static int				iResidue;	/**< remaining bytes in buffer */
  67:LPCUSB/usbcontrol.c **** static int				iLen;		/**< total length of control transfer */
  68:LPCUSB/usbcontrol.c **** 
  69:LPCUSB/usbcontrol.c **** /** Array of installed request handler callbacks */
  70:LPCUSB/usbcontrol.c **** static TFnHandleRequest *apfnReqHandlers[4] = {NULL, NULL, NULL, NULL};
  71:LPCUSB/usbcontrol.c **** /** Array of installed request data pointers */
  72:LPCUSB/usbcontrol.c **** static U8				*apbDataStore[4] = {NULL, NULL, NULL, NULL};
  73:LPCUSB/usbcontrol.c **** 
  74:LPCUSB/usbcontrol.c **** /**
  75:LPCUSB/usbcontrol.c **** 	Local function to handle a request by calling one of the installed
  76:LPCUSB/usbcontrol.c **** 	request handlers.
  77:LPCUSB/usbcontrol.c **** 		
  78:LPCUSB/usbcontrol.c **** 	In case of data going from host to device, the data is at *ppbData.
  79:LPCUSB/usbcontrol.c **** 	In case of data going from device to host, the handler can either
  80:LPCUSB/usbcontrol.c **** 	choose to write its data at *ppbData or update the data pointer.
  81:LPCUSB/usbcontrol.c **** 		
  82:LPCUSB/usbcontrol.c **** 	@param [in]		pSetup		The setup packet
  83:LPCUSB/usbcontrol.c **** 	@param [in,out]	*piLen		Pointer to data length
  84:LPCUSB/usbcontrol.c **** 	@param [in,out]	ppbData		Data buffer.
  85:LPCUSB/usbcontrol.c **** 
  86:LPCUSB/usbcontrol.c **** 	@return TRUE if the request was handles successfully
  87:LPCUSB/usbcontrol.c ****  */
  88:LPCUSB/usbcontrol.c **** static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
  89:LPCUSB/usbcontrol.c **** {
  90:LPCUSB/usbcontrol.c **** 	TFnHandleRequest *pfnHandler;
  91:LPCUSB/usbcontrol.c **** 	int iType;
  92:LPCUSB/usbcontrol.c **** 	
  93:LPCUSB/usbcontrol.c **** 	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
  94:LPCUSB/usbcontrol.c **** 	pfnHandler = apfnReqHandlers[iType];
  95:LPCUSB/usbcontrol.c **** 	if (pfnHandler == NULL) {
  96:LPCUSB/usbcontrol.c **** 		DBG("No handler for reqtype %d\n", iType);
  97:LPCUSB/usbcontrol.c **** 		return FALSE;
  98:LPCUSB/usbcontrol.c **** 	}
  99:LPCUSB/usbcontrol.c **** 
 100:LPCUSB/usbcontrol.c **** 	return pfnHandler(pSetup, piLen, ppbData);
 101:LPCUSB/usbcontrol.c **** }
 102:LPCUSB/usbcontrol.c **** 
 103:LPCUSB/usbcontrol.c **** 
 104:LPCUSB/usbcontrol.c **** /**
 105:LPCUSB/usbcontrol.c **** 	Local function to stall the control endpoint
 106:LPCUSB/usbcontrol.c **** 	
 107:LPCUSB/usbcontrol.c **** 	@param [in]	bEPStat	Endpoint status
 108:LPCUSB/usbcontrol.c ****  */
 109:LPCUSB/usbcontrol.c **** static void StallControlPipe(U8 bEPStat)
 110:LPCUSB/usbcontrol.c **** {
 111:LPCUSB/usbcontrol.c **** 	U8	*pb;
 112:LPCUSB/usbcontrol.c **** 	int	i;
 113:LPCUSB/usbcontrol.c **** 
 114:LPCUSB/usbcontrol.c **** 	USBHwEPStall(0x80, TRUE);
 115:LPCUSB/usbcontrol.c **** 
 116:LPCUSB/usbcontrol.c **** // dump setup packet
 117:LPCUSB/usbcontrol.c **** 	DBG("STALL on [");
 118:LPCUSB/usbcontrol.c **** 	pb = (U8 *)&Setup;
 119:LPCUSB/usbcontrol.c **** 	for (i = 0; i < 8; i++) {
 120:LPCUSB/usbcontrol.c **** 		DBG(" %02x", *pb++);
 121:LPCUSB/usbcontrol.c **** 	}
 122:LPCUSB/usbcontrol.c **** 	DBG("] stat=%x\n", bEPStat);
 123:LPCUSB/usbcontrol.c **** }
 124:LPCUSB/usbcontrol.c **** 
 125:LPCUSB/usbcontrol.c **** 
 126:LPCUSB/usbcontrol.c **** /**
 127:LPCUSB/usbcontrol.c **** 	Sends next chunk of data (possibly 0 bytes) to host
 128:LPCUSB/usbcontrol.c ****  */
 129:LPCUSB/usbcontrol.c **** static void DataIn(void)
 130:LPCUSB/usbcontrol.c **** {
 131:LPCUSB/usbcontrol.c **** 	int iChunk;
 132:LPCUSB/usbcontrol.c **** 
 133:LPCUSB/usbcontrol.c **** 	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
 134:LPCUSB/usbcontrol.c **** 	USBHwEPWrite(0x80, pbData, iChunk);
 135:LPCUSB/usbcontrol.c **** 	pbData += iChunk;
 136:LPCUSB/usbcontrol.c **** 	iResidue -= iChunk;
 137:LPCUSB/usbcontrol.c **** }
 138:LPCUSB/usbcontrol.c **** 
 139:LPCUSB/usbcontrol.c **** 
 140:LPCUSB/usbcontrol.c **** /**
 141:LPCUSB/usbcontrol.c ****  *	Handles IN/OUT transfers on EP0
 142:LPCUSB/usbcontrol.c ****  *
 143:LPCUSB/usbcontrol.c ****  *	@param [in]	bEP		Endpoint address
 144:LPCUSB/usbcontrol.c ****  *	@param [in]	bEPStat	Endpoint status
 145:LPCUSB/usbcontrol.c ****  */
 146:LPCUSB/usbcontrol.c **** void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
 147:LPCUSB/usbcontrol.c **** {
 148:LPCUSB/usbcontrol.c **** 	int iChunk, iType;
 149:LPCUSB/usbcontrol.c **** 
 150:LPCUSB/usbcontrol.c **** 	if (bEP == 0x00) {
 151:LPCUSB/usbcontrol.c **** 		// OUT transfer
 152:LPCUSB/usbcontrol.c **** 		if (bEPStat & EP_STATUS_SETUP) {
 153:LPCUSB/usbcontrol.c **** 			// setup packet, reset request message state machine
 154:LPCUSB/usbcontrol.c **** 			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
 155:LPCUSB/usbcontrol.c **** 			DBG("S%x", Setup.bRequest);
 156:LPCUSB/usbcontrol.c **** 
 157:LPCUSB/usbcontrol.c **** 			// defaults for data pointer and residue
 158:LPCUSB/usbcontrol.c **** 			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
 159:LPCUSB/usbcontrol.c **** 			pbData = apbDataStore[iType];
 160:LPCUSB/usbcontrol.c **** 			iResidue = Setup.wLength;
 161:LPCUSB/usbcontrol.c **** 			iLen = Setup.wLength;
 162:LPCUSB/usbcontrol.c **** 
 163:LPCUSB/usbcontrol.c **** 			if ((Setup.wLength == 0) ||
 164:LPCUSB/usbcontrol.c **** 				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
 165:LPCUSB/usbcontrol.c **** 				// ask installed handler to process request
 166:LPCUSB/usbcontrol.c **** 				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
 167:LPCUSB/usbcontrol.c **** 					DBG("_HandleRequest1 failed\n");
 168:LPCUSB/usbcontrol.c **** 					StallControlPipe(bEPStat);
 169:LPCUSB/usbcontrol.c **** 					return;
 170:LPCUSB/usbcontrol.c **** 				}
 171:LPCUSB/usbcontrol.c **** 				// send smallest of requested and offered length
 172:LPCUSB/usbcontrol.c **** 				iResidue = MIN(iLen, Setup.wLength);
 173:LPCUSB/usbcontrol.c **** 				// send first part (possibly a zero-length status message)
 174:LPCUSB/usbcontrol.c **** 				DataIn();
 175:LPCUSB/usbcontrol.c **** 			}
 176:LPCUSB/usbcontrol.c **** 		}
 177:LPCUSB/usbcontrol.c **** 		else {		
 178:LPCUSB/usbcontrol.c **** 			if (iResidue > 0) {
 179:LPCUSB/usbcontrol.c **** 				// store data
 180:LPCUSB/usbcontrol.c **** 				iChunk = USBHwEPRead(0x00, pbData, iResidue);
 181:LPCUSB/usbcontrol.c **** 				if (iChunk < 0) {
 182:LPCUSB/usbcontrol.c **** 					StallControlPipe(bEPStat);
 183:LPCUSB/usbcontrol.c **** 					return;
 184:LPCUSB/usbcontrol.c **** 				}
 185:LPCUSB/usbcontrol.c **** 				pbData += iChunk;
 186:LPCUSB/usbcontrol.c **** 				iResidue -= iChunk;
 187:LPCUSB/usbcontrol.c **** 				if (iResidue == 0) {
 188:LPCUSB/usbcontrol.c **** 					// received all, send data to handler
 189:LPCUSB/usbcontrol.c **** 					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
 190:LPCUSB/usbcontrol.c **** 					pbData = apbDataStore[iType];
 191:LPCUSB/usbcontrol.c **** 					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
 192:LPCUSB/usbcontrol.c **** 						DBG("_HandleRequest2 failed\n");
 193:LPCUSB/usbcontrol.c **** 						StallControlPipe(bEPStat);
 194:LPCUSB/usbcontrol.c **** 						return;
 195:LPCUSB/usbcontrol.c **** 					}
 196:LPCUSB/usbcontrol.c **** 					// send status to host
 197:LPCUSB/usbcontrol.c **** 					DataIn();
 198:LPCUSB/usbcontrol.c **** 				}
 199:LPCUSB/usbcontrol.c **** 			}
 200:LPCUSB/usbcontrol.c **** 			else {
 201:LPCUSB/usbcontrol.c **** 				// absorb zero-length status message
 202:LPCUSB/usbcontrol.c **** 				iChunk = USBHwEPRead(0x00, NULL, 0);
 203:LPCUSB/usbcontrol.c **** 				DBG(iChunk > 0 ? "?" : "");
 204:LPCUSB/usbcontrol.c **** 			}
 205:LPCUSB/usbcontrol.c **** 		}
 206:LPCUSB/usbcontrol.c **** 	}
 207:LPCUSB/usbcontrol.c **** 	else if (bEP == 0x80) {
 208:LPCUSB/usbcontrol.c **** 		// IN transfer
 209:LPCUSB/usbcontrol.c **** 		// send more data if available (possibly a 0-length packet)
 210:LPCUSB/usbcontrol.c **** 		DataIn();
 211:LPCUSB/usbcontrol.c **** 	}
 212:LPCUSB/usbcontrol.c **** 	else {
 213:LPCUSB/usbcontrol.c **** 		ASSERT(FALSE);
 214:LPCUSB/usbcontrol.c **** 	}
 215:LPCUSB/usbcontrol.c **** }
 216:LPCUSB/usbcontrol.c **** 
 217:LPCUSB/usbcontrol.c **** 
 218:LPCUSB/usbcontrol.c **** /**
 219:LPCUSB/usbcontrol.c **** 	Registers a callback for handling requests
 220:LPCUSB/usbcontrol.c **** 		
 221:LPCUSB/usbcontrol.c **** 	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
 222:LPCUSB/usbcontrol.c **** 	@param [in]	*pfnHandler		Callback function pointer
 223:LPCUSB/usbcontrol.c **** 	@param [in]	*pbDataStore	Data storage area for this type of request
 224:LPCUSB/usbcontrol.c ****  */
 225:LPCUSB/usbcontrol.c **** void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
 226:LPCUSB/usbcontrol.c **** {
  26              		.loc 1 226 0
  27              		@ Function supports interworking.
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 227:LPCUSB/usbcontrol.c **** 	ASSERT(iType >= 0);
 228:LPCUSB/usbcontrol.c **** 	ASSERT(iType < 4);
 229:LPCUSB/usbcontrol.c **** 	apfnReqHandlers[iType] = pfnHandler;
  32              		.loc 1 229 0
  33 0000 0C309FE5 		ldr	r3, .L3
 230:LPCUSB/usbcontrol.c **** 	apbDataStore[iType] = pbDataStore;
  34              		.loc 1 230 0
  35 0004 00C183E0 		add	ip, r3, r0, asl #2
  36 0008 10208CE5 		str	r2, [ip, #16]
  37              		.loc 1 229 0
  38 000c 001183E7 		str	r1, [r3, r0, asl #2]
 231:LPCUSB/usbcontrol.c **** }
  39              		.loc 1 231 0
  40 0010 1EFF2FE1 		bx	lr
  41              	.L4:
  42              		.align	2
  43              	.L3:
  44 0014 00000000 		.word	.LANCHOR0
  45              	.LFE4:
  47              		.align	2
  49              	StallControlPipe:
  50              	.LFB1:
  51              		.loc 1 110 0
  52              		@ Function supports interworking.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              	.LVL1:
  56 0018 10402DE9 		stmfd	sp!, {r4, lr}
  57              	.LCFI0:
  58              		.loc 1 114 0
  59 001c 8000A0E3 		mov	r0, #128
  60              	.LVL2:
  61 0020 0110A0E3 		mov	r1, #1
  62 0024 FEFFFFEB 		bl	USBHwEPStall
  63              		.loc 1 123 0
  64 0028 1040BDE8 		ldmfd	sp!, {r4, lr}
  65 002c 1EFF2FE1 		bx	lr
  66              	.LFE1:
  68              		.align	2
  70              	DataIn:
  71              	.LFB2:
  72              		.loc 1 130 0
  73              		@ Function supports interworking.
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76 0030 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
  77              	.LCFI1:
  78              		.loc 1 133 0
  79 0034 38409FE5 		ldr	r4, .L9
  80 0038 205094E5 		ldr	r5, [r4, #32]
  81 003c 400055E3 		cmp	r5, #64
  82 0040 4050A0A3 		movge	r5, #64
  83              	.LVL3:
  84              		.loc 1 134 0
  85 0044 0520A0E1 		mov	r2, r5
  86 0048 8000A0E3 		mov	r0, #128
  87 004c 241094E5 		ldr	r1, [r4, #36]
  88 0050 FEFFFFEB 		bl	USBHwEPWrite
  89              		.loc 1 135 0
  90 0054 242094E5 		ldr	r2, [r4, #36]
  91              		.loc 1 136 0
  92 0058 203094E5 		ldr	r3, [r4, #32]
  93 005c 033065E0 		rsb	r3, r5, r3
  94              		.loc 1 135 0
  95 0060 055082E0 		add	r5, r2, r5
  96              	.LVL4:
  97              		.loc 1 136 0
  98 0064 203084E5 		str	r3, [r4, #32]
  99              		.loc 1 135 0
 100 0068 245084E5 		str	r5, [r4, #36]
 101              		.loc 1 137 0
 102 006c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 103 0070 1EFF2FE1 		bx	lr
 104              	.L10:
 105              		.align	2
 106              	.L9:
 107 0074 00000000 		.word	.LANCHOR0
 108              	.LFE2:
 110              		.align	2
 111              		.global	USBHandleControlTransfer
 113              	USBHandleControlTransfer:
 114              	.LFB3:
 115              		.loc 1 147 0
 116              		@ Function supports interworking.
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              	.LVL5:
 120              		.loc 1 150 0
 121 0078 003050E2 		subs	r3, r0, #0
 122              		.loc 1 147 0
 123 007c 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 124              	.LCFI2:
 125              		.loc 1 147 0
 126 0080 0150A0E1 		mov	r5, r1
 127              		.loc 1 150 0
 128 0084 4800001A 		bne	.L12
 129              	.LVL6:
 130              		.loc 1 152 0
 131 0088 041011E2 		ands	r1, r1, #4
 132 008c 30419FE5 		ldr	r4, .L26
 133 0090 2000000A 		beq	.L13
 134              		.loc 1 154 0
 135 0094 281084E2 		add	r1, r4, #40
 136 0098 0820A0E3 		mov	r2, #8
 137 009c FEFFFFEB 		bl	USBHwEPRead
 138              	.LVL7:
 139              		.loc 1 158 0
 140 00a0 2810D4E5 		ldrb	r1, [r4, #40]	@ zero_extendqisi2
 141 00a4 A122A0E1 		mov	r2, r1, lsr #5
 142 00a8 032002E2 		and	r2, r2, #3
 143              	.LVL8:
 144              		.loc 1 160 0
 145 00ac BE32D4E1 		ldrh	r3, [r4, #46]
 146              		.loc 1 159 0
 147 00b0 020184E0 		add	r0, r4, r2, asl #2
 148 00b4 100090E5 		ldr	r0, [r0, #16]
 149              		.loc 1 163 0
 150 00b8 000053E3 		cmp	r3, #0
 151              		.loc 1 159 0
 152 00bc 240084E5 		str	r0, [r4, #36]
 153              		.loc 1 161 0
 154 00c0 303084E5 		str	r3, [r4, #48]
 155              		.loc 1 160 0
 156 00c4 203084E5 		str	r3, [r4, #32]
 157              		.loc 1 163 0
 158 00c8 0100000A 		beq	.L14
 159 00cc A113B0E1 		movs	r1, r1, lsr #7
 160 00d0 3900000A 		beq	.L22
 161              	.L14:
 162              	.LBB6:
 163              	.LBB7:
 164              		.loc 1 94 0
 165 00d4 E8409FE5 		ldr	r4, .L26
 166 00d8 023194E7 		ldr	r3, [r4, r2, asl #2]
 167              	.LVL9:
 168              		.loc 1 95 0
 169 00dc 000053E3 		cmp	r3, #0
 170 00e0 2B00000A 		beq	.L20
 171              		.loc 1 100 0
 172 00e4 280084E2 		add	r0, r4, #40
 173 00e8 301084E2 		add	r1, r4, #48
 174 00ec 242084E2 		add	r2, r4, #36
 175              	.LVL10:
 176 00f0 0FE0A0E1 		mov	lr, pc
 177 00f4 13FF2FE1 		bx	r3
 178              	.LVL11:
 179              	.LBE7:
 180              	.LBE6:
 181              		.loc 1 166 0
 182 00f8 000050E3 		cmp	r0, #0
 183 00fc 2400000A 		beq	.L20
 184              		.loc 1 172 0
 185 0100 BE22D4E1 		ldrh	r2, [r4, #46]
 186 0104 303094E5 		ldr	r3, [r4, #48]
 187 0108 030052E1 		cmp	r2, r3
 188 010c 202084D5 		strle	r2, [r4, #32]
 189 0110 203084C5 		strgt	r3, [r4, #32]
 190 0114 260000EA 		b	.L24
 191              	.LVL12:
 192              	.L13:
 193              		.loc 1 178 0
 194 0118 202094E5 		ldr	r2, [r4, #32]
 195 011c 000052E3 		cmp	r2, #0
 196 0120 1E0000DA 		ble	.L18
 197              		.loc 1 180 0
 198 0124 241094E5 		ldr	r1, [r4, #36]
 199 0128 FEFFFFEB 		bl	USBHwEPRead
 200              	.LVL13:
 201              		.loc 1 181 0
 202 012c 000050E3 		cmp	r0, #0
 203              	.LVL14:
 204 0130 170000BA 		blt	.L20
 205              		.loc 1 186 0
 206 0134 203094E5 		ldr	r3, [r4, #32]
 207              		.loc 1 185 0
 208 0138 242094E5 		ldr	r2, [r4, #36]
 209              		.loc 1 186 0
 210 013c 033060E0 		rsb	r3, r0, r3
 211              		.loc 1 187 0
 212 0140 000053E3 		cmp	r3, #0
 213              		.loc 1 185 0
 214 0144 000082E0 		add	r0, r2, r0
 215              	.LVL15:
 216 0148 240084E5 		str	r0, [r4, #36]
 217              		.loc 1 186 0
 218 014c 203084E5 		str	r3, [r4, #32]
 219              		.loc 1 187 0
 220 0150 1900001A 		bne	.L22
 221              		.loc 1 189 0
 222 0154 2820D4E5 		ldrb	r2, [r4, #40]	@ zero_extendqisi2
 223 0158 A222A0E1 		mov	r2, r2, lsr #5
 224 015c 032002E2 		and	r2, r2, #3
 225              	.LVL16:
 226              	.LBB8:
 227              	.LBB10:
 228              		.loc 1 94 0
 229 0160 023194E7 		ldr	r3, [r4, r2, asl #2]
 230              	.LVL17:
 231              	.LBE10:
 232              	.LBE8:
 233              		.loc 1 190 0
 234 0164 022184E0 		add	r2, r4, r2, asl #2
 235              	.LVL18:
 236 0168 102092E5 		ldr	r2, [r2, #16]
 237              	.LBB12:
 238              	.LBB9:
 239              		.loc 1 95 0
 240 016c 000053E3 		cmp	r3, #0
 241              	.LBE9:
 242              	.LBE12:
 243              		.loc 1 190 0
 244 0170 242084E5 		str	r2, [r4, #36]
 245              	.LBB13:
 246              	.LBB11:
 247              		.loc 1 95 0
 248 0174 0600000A 		beq	.L20
 249              		.loc 1 100 0
 250 0178 242084E2 		add	r2, r4, #36
 251 017c 280084E2 		add	r0, r4, #40
 252 0180 301084E2 		add	r1, r4, #48
 253 0184 0FE0A0E1 		mov	lr, pc
 254 0188 13FF2FE1 		bx	r3
 255              	.LVL19:
 256              	.LBE11:
 257              	.LBE13:
 258              		.loc 1 191 0
 259 018c 000050E3 		cmp	r0, #0
 260 0190 0700001A 		bne	.L24
 261              	.LVL20:
 262              	.L20:
 263              		.loc 1 193 0
 264 0194 0500A0E1 		mov	r0, r5
 265              	.LVL21:
 266              		.loc 1 215 0
 267 0198 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 268              		.loc 1 193 0
 269 019c 9DFFFFEA 		b	StallControlPipe
 270              	.LVL22:
 271              	.L18:
 272              		.loc 1 202 0
 273 01a0 0120A0E1 		mov	r2, r1
 274 01a4 FEFFFFEB 		bl	USBHwEPRead
 275              	.LVL23:
 276 01a8 030000EA 		b	.L22
 277              	.LVL24:
 278              	.L12:
 279              		.loc 1 207 0
 280 01ac 800053E3 		cmp	r3, #128
 281 01b0 0100001A 		bne	.L22
 282              	.L24:
 283              		.loc 1 215 0
 284 01b4 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 285              		.loc 1 210 0
 286 01b8 9CFFFFEA 		b	DataIn
 287              	.LVL25:
 288              	.L22:
 289              		.loc 1 215 0
 290 01bc 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 291 01c0 1EFF2FE1 		bx	lr
 292              	.L27:
 293              		.align	2
 294              	.L26:
 295 01c4 00000000 		.word	.LANCHOR0
 296              	.LFE3:
 298              		.bss
 299              		.align	2
 300              		.set	.LANCHOR0,. + 0
 303              	apfnReqHandlers:
 304 0000 00000000 		.space	16
 304      00000000 
 304      00000000 
 304      00000000 
 307              	apbDataStore:
 308 0010 00000000 		.space	16
 308      00000000 
 308      00000000 
 308      00000000 
 311              	iResidue:
 312 0020 00000000 		.space	4
 315              	pbData:
 316 0024 00000000 		.space	4
 319              	Setup:
 320 0028 00000000 		.space	8
 320      00000000 
 323              	iLen:
 324 0030 00000000 		.space	4
 415              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbcontrol.c
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:23     .text:0000000000000000 USBRegisterRequestHandler
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:33     .text:0000000000000000 $a
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:44     .text:0000000000000014 $d
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:49     .text:0000000000000018 StallControlPipe
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:56     .text:0000000000000018 $a
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:70     .text:0000000000000030 DataIn
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:107    .text:0000000000000074 $d
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:113    .text:0000000000000078 USBHandleControlTransfer
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:121    .text:0000000000000078 $a
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:295    .text:00000000000001c4 $d
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:303    .bss:0000000000000000 apfnReqHandlers
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:307    .bss:0000000000000010 apbDataStore
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:311    .bss:0000000000000020 iResidue
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:315    .bss:0000000000000024 pbData
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:319    .bss:0000000000000028 Setup
/var/folders/c7/c7+1KegJECCEn2gM8K5Cj++++TI/-Tmp-//cc5t6u5M.s:323    .bss:0000000000000030 iLen

UNDEFINED SYMBOLS
USBHwEPStall
USBHwEPWrite
USBHwEPRead
